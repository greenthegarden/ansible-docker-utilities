---
- name: Configure utility services

  hosts: localhost

  vars:

  pre_tasks:

    - name: Check for dependent python modules
      community.general.python_requirements_info:
        dependencies:
          - docker>=5.0.0
      tags:
        - always

  tasks:

    ####### Docker Socket Proxy SECTION

    # Docker Socket Proxy - Security Enhanced Proxy for Docker Socket

    - name: Set Docker Socket Proxy facts
      ansible.builtin.set_fact:
        # docker_proxy_image_name: tecnativa/docker-socket-proxy
        docker_proxy_image_name: fluencelabs/docker-socket-proxy
        docker_proxy_image_tag: latest
        docker_proxy_container_name: docker-socket-proxy
      tags:
        - docker_socket_proxy

    - name: Check if Docker Socket Proxy is running
      community.docker.docker_container_info:
        name: "{{ docker_proxy_container_name }}"
      register: docker_socket_proxy_state
      tags:
        - docker_socket_proxy
      
    - block:

      - name: Pull Docker Socket Proxy image
        community.docker.docker_image:
          name: "{{ docker_proxy_image_name }}:{{ docker_proxy_image_tag | default('latest') }}"
          source: pull
        tags:
          - docker_socket_proxy
          
      - name: Start Docker Socket Proxy
        community.docker.docker_container:
          name: "{{ docker_proxy_container_name }}"
          image: "{{ docker_proxy_image_name }}:{{ docker_proxy_image_tag }}"
          env:
            LOG_LEVEL: info  # debug,info,notice,warning,err,crit,alert,emerg
            ## Variables match the URL prefix (i.e. AUTH blocks access to /auth/* parts of the API, etc.).
            # 0 to revoke access.
            # 1 to grant access.
            ## Granted by Default
            EVENTS: "1"
            PING: "1"
            VERSION: "1"
            ## Revoked by Default
            # Security critical
            AUTH: "0"
            SECRETS: "0"
            POST: "0"
            # Not always needed
            BUILD: "0"
            COMMIT: "0"
            CONFIGS: "0"
            CONTAINERS: "1"  # Traefik, portainer, etc.
            DISTRIBUTION: "0"
            EXEC: "0"
            IMAGES: "1"  # Portainer
            INFO: "1"  # Portainer
            NETWORKS: "1"  # Portainer
            NODES: "0"
            PLUGINS: "0"
            SERVICES: "1"  # Portainer
            SESSION: "0"
            SWARM: "0"
            SYSTEM: "0"
            TASKS: "1"  # Portaienr
            VOLUMES: "1"  # Portainer
          # networks:
          #   socket_proxy:
          #     ipv4_address: 192.168.91.254 # You can specify a static IP
          published_ports:
            - "127.0.0.1:2375:2375" # Port 2375 should only ever get exposed to the internal network. When possible use this line.
          # I use the next line instead, as I want portainer to manage multiple docker endpoints within my home network.
          # - "2375:2375"
          privileged: true
          restart: true
          restart_policy: unless-stopped
          state: started
          volumes:
            - "/var/run/docker.sock:/var/run/docker.sock"
        tags:
          - docker_socket_proxy

      when: not docker_socket_proxy_state.exists

    ####### CONSUL NETWORK SECTION

    - name: Set Consul Network facts
      ansible.builtin.set_fact:
        consul_network_name: consul-network

    - name: Create Consul network
      community.docker.docker_network:
        name: "{{ consul_network_name | default('consul-network') }}"
        internal: false

    ####### CONSUL SECTION

    # https://www.consul.io/docs/dynamic-app-config/kv
    # https://hub.docker.com/_/consul/
    # https://learn.hashicorp.com/tutorials/consul/docker-container-agents

    - name: Set Consul facts
      ansible.builtin.set_fact:
        consul_image_name: consul
        consul_image_tag: latest
        consul_container_name: consul
        consul_container_port: 8500
        consul_volume: consul-volume
        consul_command: "agent -server -ui -bootstrap-expect=1 -client=0.0.0.0"
        consul_service_hostname: "{{ hostvars[inventory_hostname]['ansible_default_ipv4']['address'] }}"
      tags:
        - consul

    - name: Check if Consul is running
      community.docker.docker_container_info:
        name: "{{ consul_container_name }}"
      register: consul_state
      tags:
        - consul
      
    - block:

      - name: Pull Consul image
        community.docker.docker_image:
          name: "{{ consul_image_name }}:{{ consul_image_tag | default('latest') }}"
          source: pull
        tags:
          - consul

      - name: Create Consul volume
        community.docker.docker_volume:
          name: "{{ consul_volume }}"
          labels:
            description: 'Persistent data storage for consul'
        tags:
          - consul

      - name: Start Consul as server
        community.docker.docker_container:
          name: "{{ consul_container_name }}"
          image: "{{ consul_image_name }}:{{ consul_image_tag | default('latest') }}"
          command: "{{ consul_command }}"
          detach: true
          published_ports:
            # - 8400:8400
            - "{{ consul_container_port | default(8500) }}:8500"
            # - 8600:8600
            - 8600:8600/udp
          restart: true
          restart_policy: unless-stopped
          state: started
          volumes:
            - "{{ consul_volume }}:/consul/data"
            - /etc/localtime:/etc/localtime:ro
        register: consul_register
        tags:
          - consul

      - name: Wait for Consul to accept connections
        ansible.builtin.wait_for:
          host: "{{ hostvars[inventory_hostname]['ansible_default_ipv4']['address'] }}"
          port: "{{ consul_container_port | default(8500) }}"
          connect_timeout: 1
          delay: 10
          state: started
          timeout: 30
        register: consul_running
        until: consul_running is success
        retries: 10
        tags:
          - consul

      when: not consul_state.exists

    ####### VAULT SECTION

    # https://hub.docker.com/_/vault

    - name: Set Vault facts
      ansible.builtin.set_fact:
        vault_image_name: vault
        vault_image_tag: latest
        vault_container_name: vault
        vault_container_port: 8200
        vault_command: "server"
        vault_service_hostname: "{{ hostvars[inventory_hostname]['ansible_default_ipv4']['address'] }}"
        vault_service_protocol: http
      tags:
        - vault

    - name: Set Vault container facts
      ansible.builtin.set_fact:
        vault_ports:
          - "{{ vault_container_port | default(8200) }}:8200"
        vault_service_url: "{{ vault_service_protocol }}://{{ vault_service_hostname }}:{{ vault_container_port }}"
        vault_volumes:
          - /etc/localtime:/etc/localtime:ro

    - name: Set Vault configuration facts
      ansible.builtin.set_fact:
        vault_config:
          apt_addr: "{{ vault_service_url }}"
          default_lease_ttl: "10h"
          disable_mlock: true
          listener:
              tcp:
                address: "0.0.0.0:{{ vault_container_port }}"
                tls_disable: true
          max_lease_ttl: "10h"
          storage:
            consul:
              address: "{{ consul_service_hostname }}:{{ consul_container_port | default(8500) }}"
              path: vault
          telemetry:
            prometheus_retention_time: "30s"
            disable_hostname: true
          ui: true
        vault_dev_root_token_id: homelabroot
      tags:
        - vault

    - name: Check if Vault is running
      community.docker.docker_container_info:
        name: "{{ vault_container_name }}"
      register: vault_state
      tags:
        - vault
      
    - block:

      - name: Pull Vault image
        community.docker.docker_image:
          name: "{{ vault_image_name }}:{{ vault_image_tag | default('latest') }}"
          source: pull
        tags:
          - vault

      - name: Start Vault
        community.docker.docker_container:
          name: "{{ vault_container_name }}"
          image: "{{ vault_image_name }}:{{ vault_image_tag | default('latest') }}"
          capabilities:
            - IPC_LOCK
          command: "{{ vault_command }}"
          detach: true
          env:
            VAULT_DEV_ROOT_TOKEN_ID: "{{ vault_dev_root_token_id }}"
            VAULT_LOCAL_CONFIG: "{{ vault_config | to_json }}"
          hostname: "{{ vault_service_hostname }}"
          published_ports: "{{ vault_ports }}"
          restart: true
          restart_policy: unless-stopped
          state: started
          volumes: "{{ vault_volumes }}"
        register: vault_container_state
        tags:
          - vault

      - name: Wait for Vault to accept connections
        ansible.builtin.wait_for:
          host: "{{ vault_service_hostname }}"
          port: "{{ vault_container_port | default(8200) }}"
          connect_timeout: 1
          delay: 10
          state: started
          timeout: 30
        register: vault_running
        until: vault_running is success
        retries: 10
        tags:
          - vault

      when: not vault_state.exists

    ####### PORTAINER SECTION

    # https://documentation.portainer.io/v2.0/deploy/ceinstalldocker/

    - name: Set Portainer facts
      ansible.builtin.set_fact:
        portainer_image_name: portainer/portainer-ce
        portainer_image_tag: latest
        portainer_container_name: portainer
        portainer_container_port: 9443
        portainer_volume: portainer-volume
      tags:
        - portainer

    - name: Check if Portainer is running
      community.docker.docker_container_info:
        name: "{{ portainer_container_name }}"
      register: portainer_state
      tags:
        - portainer
      
    - block:

      - name: Pull Portainer image
        community.docker.docker_image:
          name: "{{ portainer_image_name }}:{{ portainer_image_tag | default('latest') }}"
          source: pull
        tags:
          - portainer

      - name: Create volume for Portainer
        community.docker.docker_volume:
          name: "{{ portainer_volume }}"
        tags:
          - portainer

      - name: Start Portainer
        community.docker.docker_container:
          name: "{{ portainer_container_name }}"
          image: "{{ portainer_image_name }}:{{ portainer_image_tag | default('latest') }}"
          detach: true
          env:
            DOCKER_HOST: tcp://docker-socket-proxy:2375
          published_ports:
            - "{{ portainer_container_port | default(9443) }}:9443"
          restart: true
          restart_policy: unless-stopped
          state: started
          volumes:
            - "{{ portainer_volume }}:/data"
            - /var/run/docker.sock:/var/run/docker.sock:ro
            - /etc/localtime:/etc/localtime:ro
        register: portainer_register
        tags:
          - portainer

      - name: Wait for Portainer to accept connections
        ansible.builtin.wait_for:
          # host: "{{ portainer_register['container']\
          #   ['NetworkSettings']\
          #   ['Networks']\
          #   ['monitoring-network']\
          #   ['IPAddress'] }}"
          host: "{{ hostvars[inventory_hostname]['ansible_default_ipv4']['address'] }}"
          port: "{{ portainer_container_port | default(9443) }}"
          connect_timeout: 1
          delay: 10
          state: started
          timeout: 30
        register: portainer_running
        until: portainer_running is success
        retries: 10
        tags:
          - portainer

      when: not portainer_state.exists

    ####### UPTIME KUMA SECTION

    # https://ashishsecdev.medium.com/uptime-kuma-open-source-monitoring-tool-460ef5b7a64c

    - name: Set Uptime Kuma facts
      ansible.builtin.set_fact:
        kuma_image_name: louislam/uptime-kuma
        kuma_image_tag: '1'
        kuma_container_name: uptimekuma
        kuma_container_port: 3001
        kuma_volume: uptime-kuma-volume
      tags:
        - kuma

    - name: Check if Uptime Kuma is running
      community.docker.docker_container_info:
        name: "{{ kuma_container_name }}"
      register: kuma_state
      tags:
        - kuma
      
    - block:

      - name: Pull Uptime Kuma image
        community.docker.docker_image:
          name: "{{ kuma_image_name }}:{{ kuma_image_tag | default('latest') }}"
          source: pull
        tags:
          - kuma

      - name: Create volume for Uptime Kuma
        community.docker.docker_volume:
          name: "{{ kuma_volume }}"
          state: present
        tags:
          - kuma

      # docker run -d —-restart=always -p 3001:3001 -v uptime-kuma:/app/data —-name uptimekuma louislam/uptime-kuma:1
      - name: Run Uptime Kuma
        community.docker.docker_container:
          name: "{{ kuma_container_name }}"
          image: "{{ kuma_image_name }}:{{ kuma_image_tag | default('latest') }}"
          detach: true
          published_ports:
            - "{{ kuma_container_port | default(3001) }}:3001"
          restart: true
          restart_policy: unless-stopped
          state: started
          volumes:
            - "{{ kuma_volume }}:/app/data"
        register: kuma_register
        tags:
          - kuma

      - name: Wait for Uptime Kuma to accept connections
        ansible.builtin.wait_for:
          # host: "{{ kuma_register['container']\
          #   ['NetworkSettings']\
          #   ['Networks']\
          #   ['monitoring-network']\
          #   ['IPAddress'] }}"
          host: "{{ hostvars[inventory_hostname]['ansible_default_ipv4']['address'] }}"
          port: "{{ kuma_container_port | default(3001) }}"
          connect_timeout: 1
          delay: 10
          state: started
          timeout: 30
        register: kuma_running
        until: kuma_running is success
        retries: 10
        tags:
          - kuma

      - name: Set Grafana facts
        ansible.builtin.set_fact:
          grafana_container_name: grafana
          grafana_container_port: 3000
        tags:
          - kuma
          - grafana

      - name: Set Grafana API facts
        ansible.builtin.set_fact:
          grafana_instance: "{{ grafana_container_name | default('grafana') }}"
          # Use domain name here as Grafana is running on a different Docker network
          grafana_api_url: "http://{{ ansible_default_ipv4.address }}:{{ grafana_container_port }}"
          grafana_security: {admin_user: admin, admin_password: "monitoring"}
          grafana_use_provisioning: false  # will use API
        tags:
          - kuma
          - grafana

      - name: Check if Grafana is running
        community.docker.docker_container_info:
          name: "{{ grafana_container_name }}"
        register: grafana_state
        tags:
          - kuma
          - grafana

      - name: Create Grafana dashboard
        community.grafana.grafana_dashboard:
          grafana_url: "{{ grafana_api_url }}"
          # grafana_api_key: "{{ grafana_api_key }}"
          grafana_user: "{{ grafana_security.admin_user }}"
          grafana_password: "{{ grafana_security.admin_password }}"
          # folder: General
          dashboard_url: "https://grafana.com/api/dashboards/{{ item.dashboard_id }}/revisions/{{ item.dashboard_revision }}/download"
        vars:
          grafana_dashboards:
            # Uptime Kuma by proffalken
            # https://grafana.com/grafana/dashboards/14847
            - dashboard_id: '14847'
              dashboard_revision: '2'
              datasource: 'Prometheus'
        with_items: "{{ grafana_dashboards }}"
        tags:
          - kuma
          - grafana

      when: not kuma_state.exists

    ####### DASHY SECTION

    # https://dashy.to/

    - name: Set Dashy facts
      ansible.builtin.set_fact:
        dashy_image_name: lissy93/dashy
        dashy_image_tag: latest
        dashy_container_name: dashy
        dashy_container_port: 8888
      tags:
        - dashy

    - name: Check if Dashy is running
      community.docker.docker_container_info:
        name: "{{ dashy_container_name }}"
      register: dashy_state
      tags:
        - dashy

    - block:

      - name: Pull Dashy image
        community.docker.docker_image:
          name: "{{ dashy_image_name }}:{{ dashy_image_tag | default('latest') }}"
          source: pull
        tags:
          - dashy

      # docker run -d \
      #   -p 8080:80 \
      #   -v ~/my-conf.yml:/app/public/conf.yml \
      #   --name my-dashboard \
      #   --restart=always \
      #   lissy93/dashy:latest
      - name: Start Dashy
        community.docker.docker_container:
          name: "{{ dashy_container_name }}"
          image: "{{dashy_image_name }}:{{ dashy_image_tag | default('latest') }}"
          detach: true
          published_ports:
            - "{{ dashy_container_port | default(8080) }}:80"
          restart: true
          restart_policy: unless-stopped
          volumes:
            # - ~/my-conf.yml:/app/public/conf.yml
            - /etc/localtime:/etc/localtime:ro
        tags:
          - dashy

      - name: Wait for Dashy to accept connections
        ansible.builtin.wait_for:
          host: "{{ hostvars[inventory_hostname]['ansible_default_ipv4']['address'] }}"
          port: "{{ dashy_container_port | default(8080) }}"
          connect_timeout: 1
          delay: 10
          state: started
          timeout: 30
        register: dashy_running
        until: dashy_running is success
        retries: 10
        tags:
          - dashy

      when: not dashy_state.exists

    ####### What's Up Docker SECTION

    # https://fmartinou.github.io/whats-up-docker/#/quickstart/

    - name: Set What's up Docker? facts
      ansible.builtin.set_fact:
        wud_image_name: fmartinou/whats-up-docker
        wud_image_tag: latest
        wud_container_name: whats-up-docker
        wud_container_port: 3003
      tags:
        - whats-up-docker

    - name: Check if What's up Docker? is running
      community.docker.docker_container_info:
        name: "{{ wud_container_name }}"
      register: wud_state
      tags:
        - whats-up-docker

    - block:

      - name: Pull What's up Docker? image
        community.docker.docker_image:
          name: "{{ wud_image_name }}:{{ wud_image_tag | default('latest') }}"
          source: pull
        tags:
          - whats-up-docker

      # docker run -d --name wud \
      #   -v "/var/run/docker.sock:/var/run/docker.sock" \
      #   -p 3000:3000 \
      #   fmartinou/whats-up-docker
      - name: Start What's up Docker?
        community.docker.docker_container:
          name: "{{ wud_container_name }}"
          image: "{{wud_image_name }}:{{ wud_image_tag | default('latest') }}"
          detach: true
          env:
            WUD_TRIGGER_MQTT_MOSQUITTO_URL: "mqtt://192.168.1.186:1883"
            WUD_TRIGGER_MQTT_MOSQUITTO_HASS_ENABLED: "true"
          published_ports:
            - "{{ wud_container_port | default(3000) }}:3000"
          restart: true
          restart_policy: unless-stopped
          volumes:
            - /var/run/docker.sock:/var/run/docker.sock:ro
            - /etc/localtime:/etc/localtime:ro
        tags:
          - whats-up-docker

      - name: Wait for What's up Docker? to accept connections
        ansible.builtin.wait_for:
          host: "{{ hostvars[inventory_hostname]['ansible_default_ipv4']['address'] }}"
          port: "{{ wud_container_port | default(3000) }}"
          connect_timeout: 1
          delay: 10
          state: started
          timeout: 30
        register: wud_running
        until: wud_running is success
        retries: 10
        tags:
          - whats-up-docker

      when: not wud_state.exists

    ####### WATCHTOWER SECTION

    # Source: https://hub.docker.com/r/containrrr/watchtower

    - name: Set Watchtower facts
      ansible.builtin.set_fact:
        watchtower_image_name: containrrr/watchtower
        watchtower_image_tag: latest
        watchtower_container_name: watchtower
        watchtower_volume: loki-volume
      tags:
        - watchtower

    - name: Check if Watchtower is running
      community.docker.docker_container_info:
        name: "{{ watchtower_container_name }}"
      register: watchtower_state
      tags:
        - watchtower
      
    - block:
    
      - name: Pull Watchtower image
        community.docker.docker_image:
          name: "{{ watchtower_image_name }}:{{ watchtower_image_tag | default('latest') }}"
          source: pull
        tags:
          - watchtower

      - name: Start Watchtower
        community.docker.docker_container:
          name: "{{ watchtower_container_name }}"
          image: "{{ watchtower_image_name }}:{{ watchtower_image_tag | default('latest') }}"
          # command: --schedule "0 0 4 * * *"
          detach: true
          env:
            WATCHTOWER_CLEANUP: true
          restart: true
          restart_policy: unless-stopped
          state: started
          volumes:
            - /var/run/docker.sock:/var/run/docker.sock:ro
            - /etc/localtime:/etc/localtime:ro
        register: watchtower_register
        tags:
          - watchtower

      when: not watchtower_state.exists


# duplicati:
#     image: lscr.io/linuxserver/duplicati:2.0.6
#     container_name: duplicati
#     restart: unless-stopped
#     environment:
#       - PUID=${PUID}
#       - PGID=${PGID}
#       - TZ=${TZ}
#       #- CLI_ARGS= #optional
#     volumes:
#       - ${DATADIR}/duplicati/config>:/config
#       - ${DATADIR}:/source
#     ports:
#       - 8200:8200
#     logging:
#       driver: loki
#       options:
#         loki-url: "http://localhost:3100/loki/api/v1/push"